#!/bin/bash


trap "exit 0" SIGINT SIGTERM

if [ $# -eq 0 ];
then
  echo -e "Usage: cmd_looper [cmd]\n  Loops a command, refreshing after key press.\n\nArguments:\n Filters:\n\t--head=N\t\tFetch only N lines from the top\n\t--tail=N\t\tFetch only N lines from the bottom.\n\t--grep=\"expr\"\t\tPass output through grep.\n\n Other:\n\t--refresh=N\t\tRefresh automatically after N seconds.\n\t--buffer\t\tCollect all output before displaying. Default behaviour is to provide output as it comes.\n\t--countdown\t\tCount Down seconds remaining when --refresh is also specified. Default is static display.\n\nFilters are executed in order of apperance.\n\nExample: cmd_looper last --head=10 --grep=root" 2>&1;
  exit 1;
fi

CMD=
FILTERS=
REFRESH_TIMEOUT=
DO_BUFFER=0
DO_COUNTDOWN=0

for arg in $@
do
  THIS_FILTER=
  if [ ! -z "`echo $arg | grep '^--head='`" ];
  then
    THIS_FILTER="head -n `echo $arg | sed 's/--head=//'`"
  elif [ ! -z "`echo $arg | grep '^--tail='`" ];
  then
    THIS_FILTER="tail -n `echo $arg | sed 's/--tail=//'`"
  elif [ ! -z "`echo $arg | grep '^--grep='`" ];
  then
    THIS_FILTER="grep \"`echo $arg | sed 's/--grep=//'`\""
  elif [ ! -z "`echo $arg | grep '^--refresh='`" ];
  then
    REFRESH_TIMEOUT="`echo $arg | sed 's/--refresh=//'`"
    continue;
  elif [ ! -z "`echo $arg | grep '^--countdown'`" ];
  then
    DO_COUNTDOWN=1
    continue
  elif [ "$arg" = "--buffer" ];
  then
    DO_BUFFER=1
    continue;
  fi

  if [ ! -z "${THIS_FILTER}" ];
  then
    FILTERS="${FILTERS} | ${THIS_FILTER}"
  else
    if [ -z "${CMD}" ];
    then
      CMD="$arg"
    else
      CMD="${CMD} $arg"
    fi
  fi
done


if [ -z "${CMD}" ];
then
  echo "NO COMMAND SPECIFIED!" >&2;
  exit 1;
fi

if [ ! -z "${FILTERS}" ];
then
  CMD="${CMD} ${FILTERS}"
fi

which clear >/dev/null 2>&1;
if [ $? -eq 0 ];
then
    CLEAR_CMD='clear'
else
    CLEAR_CMD='printf "\033c"' # cygwin support, other systems without "clear"
fi

while [ 1 ];
do
  if [ "$DO_BUFFER" = "1" ];
  then
    OUTPUT="`${CMD}`"
    eval ${CLEAR_CMD}
    echo -e "${OUTPUT}"
  else
    eval ${CLEAR_CMD}
    ${CMD};
  fi
  LAST_UPDATED_MSG="UPDATED: `date`. Press any key to reload, or 'q' to quit....  "
  if [ -z "${REFRESH_TIMEOUT}" ];
  then
    echo -n "$LAST_UPDATED_MSG"
    read -n 1 x;
  else
    if [ $DO_COUNTDOWN -eq 1 ];
    then
      for secRemaining in `seq $REFRESH_TIMEOUT -1 1`;
      do
              echo -en "\r$LAST_UPDATED_MSG (Automatic refresh in $secRemaining seconds)"
              read -n 1 -t .99 x; # Sleep a little less than a second, as the above steps take some time.
              if [ $? -eq 0 ];
              then
                  break;
              fi
      done
    else
      echo -n "$LAST_UPDATED_MSG (Automatic refresh in $REFRESH_TIMEOUT seconds)"
      read -n 1 -t $REFRESH_TIMEOUT x
    fi
  fi
  read -d '' -t .05 -n 9999999 -s nowhere;
  if [ "$x" = "q" ];
  then
    echo -e "\nQuitting...";
    exit 0;
  fi
  echo;
  echo "Refreshing...";
  sleep .2;
done

